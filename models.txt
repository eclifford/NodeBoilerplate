Post
------------------------
id
title
body
created_at
updated_at
comments 
tags

Comment
------------------------
id
comment
author_id
created_at
updated_at

User
------------------------
id
username
password

Tags
------------------------
ID
Name


Authentication 
------------------------

Use route middleware

Need session store

var MemStore = require('connect/middleware/session/memory');

app.use(express.cookieParser());
app.use(express.session({store: MemStore({
	reapInterval: 6000 * 10 // how often to check for stale sessions
})}))

// Route Middleware
function requiresLogin(req, res, next) {
	if(req.session.user) {
		next();
	} else {
		res.redirect('/sessions/new?redir=' + req.url);
	}
}

// Now add the middleware into an example route
app.get('/', requiresLogin, function(req, res) {
	res.render('root');
});

// Session management controllers
app.get('/sessions/new', function(req, res) {
	res.render('sessions/new', {locals: {redir: req.query.redir});
});

h1 login
form(action='/sessions', method='POST')
	input(type='hidden', name='redir', value=redir)
	p
		label(for='login') Login:
		input(type='text', name='login', id='login')
	p
		label(for='password') Password:
		input(type='text', name='password', id='password')
	p
		input(type='submit')

// TEMP
var users = require('./users');

// Wire up the POST submit route
app.post('/sessions', function(req, res) {
	users.authenticate(req.body.login, req.body.password, function(user) {
		if(user) { // Auth success
			req.session.user = user;
			res.redirect(req.body.redir || '/');
		} else { // Auth failed
			req.flash('warn', 'Login Failed'); // Similar to RAILS flash (stored in session)
			res.render('session/new', {locals: {redir: req.body.redir}});
		}
	});
});

// Create dynamic helper for error messages
app.dynamicHelpers({
	session: function(req, res) {
		return req.session;
	},
	flash: function(req, res) {
		return req.flash();
	}
});

// In the layout
body
	#main
		#header
			- if(session.user)
				#user= 'logged in as' + session.user.login
				#logout 
					a(href='/sessions/destroy') logout
			- if(flash.warn)
				p#warn= flash.warn

app.get('/sessions/destroy', functioN(req, res) {
	delete req.session.user
	res.redirect('/sessions/new');
})


/app/
	/views/
	/controllers/
	/models/
	app.js
/config/
/docs/
/logs/
/public/
/spec/
/tests/
/libs/
/vendor/




* coffee watch on /src -> /lib
* compass or jade on 
/app/
	/lib/
		/client/
			/controllers/
			/models/
			/templates/
			/views/
			app.js
		/server/
			/controllers/
			/models/
			/views/
			server.js
	/src/
		/client/
			/controllers/
			/models/
			/templates/
				/index1.html/
				/index2.html/
				/index3.html/
			/views/
			app.coffee
		/server/
			/controllers/
			/models/
			/modules/
				/class1/
				/class2/
				/class3/
			server.coffee
/config/
/docs/
/logs/
/public/
	/assets/
		/images/
		/videos/
	/stylesheets/
		/stylus/
		/scss/
		stylus.css
		scss.css
	/javascripts/
		/libs/


/spec/
/tests/
/tmp/
Gemfile
package.json
bootstrap.coffee
README.md
nodemon.ignore

// Modules
var length;
module.exports.setLength = function(len) {
	length = len;
}

// Exporting a single function
module.exports = function(saying) {
	console.log(saying);
}

module.exports.generate = function(saying) {
	console.log(saying);
}

// Class Module (multi instance)
var RandomStringGenerator = function(string_length) {
	this.string_length = string_length || 6;
};

RandomStringGenerator.prototype.generate = function() {
	var chars = "abcdefhij";
	var randomstring = '';
	return randomstring;
};

// To fullfull our open to change inheritance we add the following method
module.exports._class = RandomStringGenerator;

// Expose only a factory function
module.exports.create = function(string_length) {
	return new RandomStringGenerator(string_length);
}

// MONGODB and MONGOOSE
// Key value store DB 
// Mongoose is an adapater 
npm install mongoose

var Mongoose = requrie('mongoose').Mongoose;

Mongoose.model('User', {
	properties: ['login', 'password', 'role'], 
	indexes: ['login', 'password'],
	static: {
		authenticate: function(login, password) {
			return this.find({login: login, password: password});
		}
	}
});

// Initialize the DB conneciton
var Mongoose = require('mongoose').Mongoose;
var db = Mongoose.connect('mongodb://localhost/db');

var User = db.model('User');
User.authenticate(login, password).first();

Mongoose.model('Product', {
	properties: ['name', 'description', 'price']	
});

var Product = db.model('product');
Product.find().all(function(products) {
	
})

// Async Iteration Patterns Node Tuts 19
var async = function(data, callback) {
	// LONG RUNNING FUNCTION
	var timeout = Math.ceil(Math.random() * 3000);
	setTimeout(function(), {
		callback(null, data);
	}, timeout);
};

console.log('calling async()');
async(1, function(err, data) {
	console.log('async returned with data' + data);
});

var coll = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

var insertAll = function(coll, callback) {
	
};

coll.forEach(function(elem) {
	insertElement(elem, function(err, elem) {
		console.log(elem + '')
	});
});

// Should


		




